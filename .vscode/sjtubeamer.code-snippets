{
	"sjtubeamer@color@color": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@color@color",
		"body": "\\sjtubeamer@color@color",
		"description": ""
	},
	"sjtubeamer@color@lum": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@color@lum",
		"body": "\\sjtubeamer@color@lum",
		"description": ""
	},
	"sjtubeamer@inner@cover": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@inner@cover",
		"body": "\\sjtubeamer@inner@cover",
		"description": ""
	},
	"sjtubeamer@inner@lang": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@inner@lang",
		"body": "\\sjtubeamer@inner@lang",
		"description": ""
	},
	"sjtubeamer@inner@color": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@inner@color",
		"body": "\\sjtubeamer@inner@color",
		"description": ""
	},
	"bgcenterbox": {
		"scope": "doctex,tex,latex",
		"prefix": "\\bgcenterbox",
		"body": "\\bgcenterbox{$1}",
		"description": "Define a command to make a centered background box easily.\n"
	},
	"coverpage": {
		"scope": "doctex,tex",
		"prefix": "\\coverpage",
		"body": "\\coverpage{$1}",
		"description": "Common command for \\titlepage and \\bottompage. Disable externalization for generating title page and bottom page, locally.\n"
	},
	"definecover": {
		"scope": "doctex,tex",
		"prefix": "\\definecover",
		"body": "\\definecover{$1}",
		"description": "Command generator for \\maketitle and \\makebottom, which will receive an optional command for selecting different theme. Redefinition on \\beamer@writeslideentrty locally will remove the corresponding navigation dot for miniframe outer theme.\nThis command receives one parameter for the cover type like ``title'' or ``bottom''.\n"
	},
	"highlight": {
		"scope": "doctex,tex,latex",
		"prefix": "\\highlight",
		"body": "\\highlight[${1:cprimary}]{$2}",
		"description": "Highlight the given text. Create a primary color background block with white as foreground.\n"
	},
	"paragraph": {
		"scope": "doctex,tex,latex",
		"prefix": "\\paragraph",
		"body": "\\paragraph{$1}",
		"description": "Use \\highlight macro for making contrast.\nSince beamer has deleted \\paragraph macro in this class, this template defines a macro for that to indicate it is another point and more paragraph-like. It is useful for the migration from article class.\n"
	},
	"stampbox": {
		"scope": "doctex,tex,latex",
		"prefix": "\n\\begin{stampbox",
		"body": "\n\\begin{stampbox}[${1:cprimary}]\n\t$2\n\\end{stampbox}\n",
		"description": "Make a stampbox border, which is a decoration advice from SJTU VI. It has the dependency on stampline from sjtuvi package.\n"
	},
	"codeblock": {
		"scope": "doctex,tex,latex",
		"prefix": "\n\\begin{codeblock",
		"body": "\n\\begin{codeblock}[${1:}]{$2}\n\t$3\n\\end{codeblock}\n",
		"description": "Code block environment is made for presenting code in an obvious way. Two parameters are required. The first parameter is passed to listing, which mostly sets the language to highlight, see the listings package for more details. And the second parameter receives the title to make.\n"
	},
	"sjtubeamer@outer@nav": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@outer@nav",
		"body": "\\sjtubeamer@outer@nav",
		"description": ""
	},
	"sjtubeamer@outer@logopos": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@outer@logopos",
		"body": "\\sjtubeamer@outer@logopos",
		"description": ""
	},
	"sjtubeamer@cover": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@cover",
		"body": "\\sjtubeamer@cover",
		"description": "This macro selects the cover theme.\n\\begin{description}\n\\item[maxplus] The titlegraphic will be a photo.\n\\item[max] The background will be the photo.\n\\item[min] The design will be minimalistic.\n\\item[my]Reserved interface for developers for customized title page and bottom page.\n\\end{description}\n\n$\\rightarrow$ The following will demostrates how to pass options between files.\n\n$\\rightarrow$ To set up an option, use \\DeclareOptionBeamer to let beamer theme receive such an option and store the value into a variable.\n\n$\\rightarrow$ To make the variable easy to follow and avoid duplicates, the naming system is as follows:\n\\begin{itemize}\n\\item Start with the project name sjtubeamer.\n\\item Split by @ symbol and move to the next level.\n\\item The final level should be the variable name itself.\n\\end{itemize}\n"
	},
	"sjtubeamer@color": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@color",
		"body": "\\sjtubeamer@color",
		"description": "Choose the main color palette.\n\\begin{description}\n\\item[red] The red color palatte. sjtuRed*\n\\item[blue] The blue color palatte. sjtuBlue*\n\\end{description}\n\n"
	},
	"sjtubeamer@lum": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@lum",
		"body": "\\sjtubeamer@lum",
		"description": "Decide whether it is in light mode or dark mode. Switch the lumination.\n"
	},
	"sjtubeamer@lang": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@lang",
		"body": "\\sjtubeamer@lang",
		"description": "Set the main language of this beamer. If the user is using ctexbeamer class, the default option will be Chinese. If the user use ctex package after using this theme, such an advanced user should specify the language to Chinese manually.\n\nTODO: may be a built in support for Chinese will be used in the future. Just taken \\RequirePackage[scheme=plain]{ctex} for basic Chinese character support.\n"
	},
	"sjtubeamer@nav": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@nav",
		"body": "\\sjtubeamer@nav",
		"description": "Choose the outer theme for this template.\n"
	},
	"sjtubeamer@logopos": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@logopos",
		"body": "\\sjtubeamer@logopos",
		"description": "Choose the override outer logo position. No default option will get executed since it has already been executed by the selection of \\sjtubeamer@cover.\n"
	},
	"usemytheme": {
		"scope": "doctex,tex,latex",
		"prefix": "\\usemytheme",
		"body": "\\usemytheme{$1}",
		"description": "When using my option, you could load other contrib sub-themes by this command. Use comma-seperated list to load multiple sub-themes in one line. The \\getcontribpath is defined in sjtuvi package loaded in inner theme.\n\nYou could pass options to all the sub-themes by writing in the square brackets. Then, in your sub-theme, you could use \\if\\EqualOption{<themename>}{<option>}{true} to check the condition.\n\nThis command will also first check the root directory for dependency. If it exists, the \\getcontribdir macro will be redefined. It is never recommended for placing the ltx in the same folder.\nRemember the contrib directory is permantly modified and the directory for other dependency may be missing due to this debug config. You may need to modify to \\renewcommand{\\getcontribdir}[1]{\\sjtubeamer@contribdir/#1} manually to recover to the standard configuration. We didn't put the last command into this since we only expect you to only use the debug option for only one contrib dependency --- the one needs to be documented. And you should run l3build install in the src folder for making the sjtubeamer main part into your texmf path. If you want to combine multiple dependencies, you should write and compile your documentation in the root folder. And our CI will move your documentation to the root first before checking.\n"
	},
	"bottomthanks": {
		"scope": "doctex,tex,latex",
		"prefix": "\\bottomthanks",
		"body": "\\bottomthanks",
		"description": "The \"Thank You\" caption in the bottom page. Redefine this command will change the bottom page caption.\n"
	},
	"sectionblock": {
		"scope": "doctex,tex",
		"prefix": "\\sectionblock",
		"body": "\\sectionblock{$1}",
		"description": "The common \\sectionblock command for making the section block.\n"
	},
	"sectionpage": {
		"scope": "doctex,tex,latex",
		"prefix": "\\sectionpage",
		"body": "\\sectionpage{$1}",
		"description": "Define the section page beamer template.\n"
	},
	"subsectionpage": {
		"scope": "doctex,tex,latex",
		"prefix": "\\subsectionpage",
		"body": "\\subsectionpage{$1}",
		"description": "Define the subection page beamer template.\n"
	},
	"DefineOption": {
		"scope": "doctex,tex",
		"prefix": "\\DefineOption",
		"body": "\\DefineOption{$1}{$2}{$3}",
		"description": "Define the beamer option on the corresponding package, key and value.\n"
	},
	"EqualOption": {
		"scope": "doctex,tex",
		"prefix": "\\EqualOption",
		"body": "\\EqualOption",
		"description": "To check if the option on package, key is equal to value.\n\nHere, a dummy trick is used to pass the if condition.\nSince \\LaTeX\\ handles \\if differently.\n\\iftrue will eliminate the nearest \\else and \\fi but remains other extra \\fi and throws errors.\nTo avoid this, if the macro is expanded after \\if, T=T, the condition holds and finish the current pair. And continues to process the real defined macro. This solution is somehow to combat against the \\LaTeX\\ compiler. In modern \\LaTeX3, it is not so nasty to deal with neseted conditions. \n\\iffalse doesn't need to be considered.\n"
	},
	"getcontribdir": {
		"scope": "doctex,tex,latex",
		"prefix": "\\getcontribdir",
		"body": "\\getcontribdir{$1}",
		"description": "Get the contrib directory for #1 sub-theme.\ncontrib/#1 is returned.\n"
	},
	"getcontribpath": {
		"scope": "doctex,tex,latex",
		"prefix": "\\getcontribpath",
		"body": "\\getcontribpath{$1}{$2}",
		"description": "Get the contrib directory filepath for #1 sub-theme and #2 filename.\ncontrib/#1/#2 is returned.\n"
	},
	"definelogo": {
		"scope": "doctex,tex,latex",
		"prefix": "\\definelogo",
		"body": "\\definelogo[${1:vi}]{$2}{$3}{$4}",
		"description": "Define a mask picture to make its different color variants.\nThe first argument assigns the file name and the second sets the horizontal cropping and the third sets the vertical cropping. Notice that the cropping is symmetrical (double the length). When the horizontal cropping is greater than the vertical cropping, the mask will be placed by its height, otherwise by its width. The domain for both cropping parameters is 0 to 1.\nYou should define a logo \\definelogo{mylogo}{<hc>}{<vc>} then use it in the contents like:\n\\mylogo[white], where the optional parameter could be the override color beyond the control of main logo color system or opacity=... to identify the opacity you want or any other parameter for a TikZ node.\nRemember, the picture should be in the vi/ folder by default. If you want to use some other file in other folder, add an optional paramter like \\definelogo[folder]{file}{0}{0} will get the folder/file.\nThe externalization will be disabled when using this system to generate logos, locally.\n"
	},
	"sjtubeamer@compatible": {
		"scope": "doctex,tex",
		"prefix": "\\sjtubeamer@compatible",
		"body": "\\sjtubeamer@compatible",
		"description": ""
	},
	"stamp": {
		"scope": "doctex,tex,latex",
		"prefix": "stamp",
		"body": "stamp",
		"description": "Declare stamp pattern to make a stamp array.\n\nThe newest version of TikZ provides the interface to user-define a pattern. Obeying compatibility philosophy, use \\pgfkeyvalueof interface to get parameters in a standard way. The unit is first tested in a standalone file and previewed by TikZEdt.\n"
	},
	"stamparray": {
		"scope": "doctex,tex,latex",
		"prefix": "\\stamparray",
		"body": "\\stamparray{$1}{$2}{$3}",
		"description": " Create the stamp array in the TikZ environment.\n\n Notice \\TeX{} is not good at handling parameters. Always remember to store it into a temporary variable. Register \\pgfmathresult will store the result of \\pgfmathparse.\n"
	},
	"stampline": {
		"scope": "doctex,tex,latex",
		"prefix": "stampline",
		"body": "stampline",
		"description": "Declare a decoration to make a loop stampline.\n\nNotice that auto corner on length is open to avoid spikes where the state hasn't meet final yet.\n"
	},
}